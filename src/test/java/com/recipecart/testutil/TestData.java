/* (C)2023 */
package com.recipecart.testutil;

import com.recipecart.database.MockEntitySaveAndLoader;
import com.recipecart.database.MongoEntityLoader;
import com.recipecart.database.MongoEntitySaver;
import com.recipecart.entities.Ingredient;
import com.recipecart.entities.Recipe;
import com.recipecart.entities.Tag;
import com.recipecart.entities.User;
import com.recipecart.storage.EntityLoader;
import com.recipecart.storage.EntitySaver;
import com.recipecart.storage.EntityStorage;
import java.io.IOException;
import java.util.*;

/**
 * This class provides the raw data/objects that the unit tests will use.
 *
 * <p>Invariant: for each array generated by a method in this class, none of the elements will be
 * equal (.equals) to each other, unless all elements are null.
 */
public class TestData {
    // Data is in the form of arrays of Objects, so that they can be used in TestUtils to create
    // Arguments objects to be fed into ParameterizedTests.

    // each method in this class generates an Object[] of this length
    static final int NUM_PARAM_COMBOS = 5;

    // filename containing address info of the test mongo
    public static final String TEST_MONGO_FILE = "put filename here";

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods that generate basic objects and (simulated (i.e. non-null)) primitive types

    public static Object[] getStrings() {
        return new String[] {
            "",
            "abc",
            "Hello World",
            "8*H\n"
                    + "\t(#WRU*H\u8123(*\uD83D\uDE33QH#i238rh9\n"
                    + "https://google.com<script>alert(\"Boo!\");</script>",
            null
        };
    }

    public static Object[] getGoodStrings() {
        return new String[] {
            "null", "Hello-world67", "EMPTY_STRING", "Integer.MAX_VALUE", "getGoodStrings"
        };
    }

    public static Object[] getNotNullStrings() {
        return new String[] {
            "",
            "abc",
            "Hello World",
            "8*H\n"
                    + "\t(#WRU*H\u8123(*\uD83D\uDE33QH#i238rh9\n"
                    + "https://google.com<script>alert(\"Boo!\");</script>",
            "null"
        };
    }

    public static Object[] getNullStrings() {
        return new String[] {null, null, null, null, null};
    }

    public static Object[] getIntegers() {
        return new Integer[] {0, 1, -16, null, Integer.MIN_VALUE};
    }

    public static Object[] getInts() {
        return new Object[] {0, 1, -16, Integer.MAX_VALUE, Integer.MIN_VALUE};
    }

    public static Object[] getPrimitiveDoubles() {
        return new Object[] {
            0.0, Double.NaN, Double.POSITIVE_INFINITY, Double.MAX_VALUE, -1022.10221022
        };
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods that generate (non-null) RecipeCart entities
    //  - These entities are the preset entities
    //     - This means that Tag/Ingredient/Recipe names and User usernames will also not be null

    public static Object[] getTags() {
        Object[] tags = new Tag[NUM_PARAM_COMBOS];
        for (int i = 0; i < tags.length; i++) {
            tags[i] = Presets.tag(i);
        }
        return tags;
    }

    public static Object[] getIngredients() {
        Object[] ingredients = new Ingredient[NUM_PARAM_COMBOS];
        for (int i = 0; i < ingredients.length; i++) {
            ingredients[i] = Presets.ingredient(i);
        }
        return ingredients;
    }

    public static Object[] getRecipes() {
        Object[] recipes = new Recipe[NUM_PARAM_COMBOS];
        for (int i = 0; i < recipes.length; i++) {
            recipes[i] = Presets.recipe(i);
        }
        return recipes;
    }

    public static Object[] getUsers() {
        Object[] users = new User[NUM_PARAM_COMBOS];
        for (int i = 0; i < users.length; i++) {
            users[i] = Presets.user(i);
        }
        return users;
    }

    public static Object[] getInvalidIngredients() {
        Object[] ingredients = new Ingredient[NUM_PARAM_COMBOS];
        for (int i = 0; i < ingredients.length; i++) {
            ingredients[i] = Presets.invalidIngredient(i);
        }
        return ingredients;
    }

    public static Object[] getInvalidRecipes() {
        Object[] recipes = new Recipe[NUM_PARAM_COMBOS];
        for (int i = 0; i < recipes.length; i++) {
            recipes[i] = Presets.invalidRecipe(i);
        }
        return recipes;
    }

    public static Object[] getInvalidUsers() {
        Object[] users = new User[NUM_PARAM_COMBOS];
        for (int i = 0; i < users.length; i++) {
            users[i] = Presets.invalidUser(i);
        }
        return users;
    }

    public static Object[] getRecipesNonEmptyDataStructures() {
        Object[] recipes = new Recipe[NUM_PARAM_COMBOS];
        for (int i = 0; i < recipes.length; i++) {
            recipes[i] = Presets.recipeWithNonEmptyDataStructures(i);
        }
        return recipes;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods that generate Java-library data structures
    //  - "NoNulls" means that none of the elements in the data structures will be null
    //  - Any entities appearing as elements are from the preset entities

    public static Object[] getListStringNoNulls() {
        return new List[] {
            List.of("a", "b"),
            List.of("\n", "\0", "\t", "\r"),
            new LinkedList<String>(),
            List.of("list", "set", "dict", "unordered_dict"),
            List.of("hello", "world")
        };
    }

    public static Object[] getNonEmptyListStringNoNulls() {
        return new List[] {
            List.of("a", "b"),
            List.of("\n", "\0", "\t", "\r"),
            List.of("a"),
            List.of("list", "set", "dict", "unordered_dict"),
            List.of("hello", "world")
        };
    }

    public static Object[] getListStringWithNulls() {
        return new List[] {
            null,
            TestUtils.listOfAllowNulls(null, "a"),
            TestUtils.listOfAllowNulls((Object) null),
            TestUtils.listOfAllowNulls(null, null, null),
            TestUtils.listOfAllowNulls("\n", "\0", null, "\t", "\r"),
        };
    }

    public static Object[] getSetStringNoNulls() {
        return new Set[] {
            Set.of("a", "b"),
            Set.of("\n", "\0", "\t", "\r"),
            new TreeSet<String>(),
            Set.of("list", "set", "dict", "unordered_dict"),
            Set.of("hello", "world")
        };
    }

    public static Object[] getNonEmptySetStringNoNulls() {
        return new Set[] {
            Set.of("a", "b"),
            Set.of("\n", "\0", "\t", "\r"),
            Set.of("get", "non", "empty", "set", "string", "no", "nulls"),
            Set.of("list", "set", "dict", "unordered_dict"),
            Set.of("hello", "world")
        };
    }

    public static Object[] getSetStringWithNulls() {
        return new Set[] {
            null,
            TestUtils.setOfAllowNulls(null, "a"),
            TestUtils.setOfAllowNulls((Object) null),
            TestUtils.setOfAllowNulls(null, "c", "d"),
            TestUtils.setOfAllowNulls("\n", "\0", null, "\t", "\r"),
        };
    }

    public static Object[] getInvalidSearchTermSet() {
        return new Set[] {
            null,
            TestUtils.setOfAllowNulls(null, "a"),
            TestUtils.setOfAllowNulls((Object) null),
            Set.of(),
            TestUtils.setOfAllowNulls("\n", "\0", null, "\t", "\r"),
        };
    }

    public static Object[] getSetTagNoNulls() {
        return new Set[] {
            Set.of(Presets.tag(0)),
            Set.of(Presets.tag(1), Presets.tag(2)),
            Set.of(Presets.tag(4), Presets.tag(2)),
            new HashSet<Tag>(),
            Set.of(Presets.tag(3), Presets.tag(4), Presets.tag(0))
        };
    }

    public static Object[] getNonEmptySetTagNoNulls() {
        return new Set[] {
            Set.of(Presets.tag(0)),
            Set.of(Presets.tag(1), Presets.tag(2)),
            Set.of(Presets.tag(4), Presets.tag(2)),
            Set.of(Presets.tag(0), Presets.tag(1), Presets.tag(2), Presets.tag(3), Presets.tag(4)),
            Set.of(Presets.tag(3), Presets.tag(4), Presets.tag(0))
        };
    }

    public static Object[] getSetTagWithNulls() {
        return new Set[] {
            TestUtils.setOfAllowNulls((Object) null),
            TestUtils.setOfAllowNulls(null, Presets.tag(2)),
            TestUtils.setOfAllowNulls(Presets.tag(4), null, Presets.tag(2)),
            null,
            TestUtils.setOfAllowNulls(Presets.tag(3), null, Presets.tag(4), null, Presets.tag(0))
        };
    }

    public static Object[] getMapIngredientDoubleNoNulls() {
        return new Map[] {
            Map.of(Presets.ingredient(0), 2.0),
            Map.of(),
            Map.of(Presets.ingredient(1), 0.1, Presets.ingredient(2), Double.MAX_VALUE),
            Map.of(
                    Presets.ingredient(0),
                    0.01,
                    Presets.ingredient(1),
                    100.0,
                    Presets.ingredient(2),
                    2.0,
                    Presets.ingredient(3),
                    Double.NaN,
                    Presets.ingredient(4),
                    Double.NEGATIVE_INFINITY),
            Map.of(Presets.ingredient(0), -5.0)
        };
    }

    public static Object[] getNonEmptyMapIngredientDoubleNoNulls() {
        return new Map[] {
            Map.of(Presets.ingredient(0), 2.0),
            Map.of(Presets.ingredient(4), 10000000000., Presets.ingredient(3), 0.0),
            Map.of(Presets.ingredient(1), 0.1, Presets.ingredient(2), Double.MAX_VALUE),
            Map.of(
                    Presets.ingredient(0),
                    0.01,
                    Presets.ingredient(1),
                    100.0,
                    Presets.ingredient(2),
                    2.0,
                    Presets.ingredient(3),
                    Double.NaN,
                    Presets.ingredient(4),
                    Double.NEGATIVE_INFINITY),
            Map.of(Presets.ingredient(0), -5.0)
        };
    }

    public static Object[] getMapIngredientDoubleWithNulls() {
        return new Map[] {
            TestUtils.mapOfAllowNulls(null, 2.0),
            null,
            TestUtils.mapOfAllowNulls(
                    Presets.ingredient(1),
                    0.1,
                    null,
                    null,
                    Presets.ingredient(2),
                    Double.MAX_VALUE),
            TestUtils.mapOfAllowNulls(
                    Presets.ingredient(0),
                    0.01,
                    Presets.ingredient(1),
                    100.0,
                    Presets.ingredient(2),
                    null,
                    Presets.ingredient(3),
                    Double.NaN,
                    Presets.ingredient(4),
                    Double.NEGATIVE_INFINITY),
            TestUtils.mapOfAllowNulls(Presets.ingredient(0), null)
        };
    }

    public static Object[] getListRecipeNoNulls() {
        return new List[] {
            List.of(Presets.recipe(0)),
            List.of(),
            List.of(
                    Presets.recipe(0),
                    Presets.recipe(1),
                    Presets.recipe(2),
                    Presets.recipe(3),
                    Presets.recipe(4)),
            List.of(Presets.recipe(2), Presets.recipe(3)),
            List.of(Presets.recipe(4))
        };
    }

    public static Object[] getListRecipeSomeInvalid() {
        return new List[] {
            List.of(Presets.invalidRecipe(0)),
            List.of(Presets.invalidRecipe(1), Presets.recipe(4)),
            List.of(
                    Presets.recipe(0),
                    Presets.invalidRecipe(2),
                    Presets.recipe(1),
                    Presets.recipe(2),
                    Presets.recipe(3),
                    Presets.recipe(4)),
            List.of(Presets.invalidRecipe(3), Presets.invalidRecipe(4)),
            List.of(Presets.recipe(1), Presets.invalidRecipe(0))
        };
    }

    public static Object[] getListRecipeWithNulls() {
        return new List[] {
            TestUtils.listOfAllowNulls((Object) null),
            null,
            TestUtils.listOfAllowNulls(
                    Presets.recipe(0),
                    Presets.recipe(1),
                    Presets.recipe(2),
                    null,
                    Presets.recipe(3),
                    Presets.recipe(4)),
            TestUtils.listOfAllowNulls(null, Presets.recipe(3)),
            TestUtils.listOfAllowNulls(Presets.recipe(4), null, null, null)
        };
    }

    public static Object[] getMapRecipeDoubleNoNulls() {
        return new Map[] {
            Map.of(Presets.recipe(0), 3.0),
            Map.of(Presets.recipe(1), 1.0, Presets.recipe(3), 3e+27, Presets.recipe(4), 4.000001),
            Map.of(Presets.recipe(2), Double.MAX_VALUE),
            Map.of(Presets.recipe(2), -5000.0, Presets.recipe(4), 4.0),
            Map.of()
        };
    }

    public static Object[] getMapRecipeDoubleWithNulls() {
        return new Map[] {
            TestUtils.mapOfAllowNulls(null, 3.0),
            TestUtils.mapOfAllowNulls(
                    Presets.recipe(1), 1.0, Presets.recipe(3), null, Presets.recipe(4), 4.000001),
            TestUtils.mapOfAllowNulls(null, null),
            TestUtils.mapOfAllowNulls(Presets.recipe(2), -5000.0, Presets.recipe(4), null),
            null
        };
    }

    public static Object[] getSetIngredientNoNulls() {
        return new Set[] {
            Set.of(),
            Set.of(Presets.ingredient(4)),
            Set.of(
                    Presets.ingredient(0),
                    Presets.ingredient(1),
                    Presets.ingredient(2),
                    Presets.ingredient(3),
                    Presets.ingredient(4)),
            Set.of(Presets.ingredient(3), Presets.ingredient(4)),
            Set.of(Presets.ingredient(1))
        };
    }

    public static Object[] getSetIngredientWithNulls() {
        return new Set[] {
            null,
            TestUtils.setOfAllowNulls((Object) null),
            TestUtils.setOfAllowNulls(
                    Presets.ingredient(0),
                    Presets.ingredient(1),
                    Presets.ingredient(2),
                    null,
                    Presets.ingredient(3),
                    Presets.ingredient(4)),
            TestUtils.setOfAllowNulls(null, Presets.ingredient(4)),
            TestUtils.setOfAllowNulls(Presets.ingredient(1), null)
        };
    }

    public static Object[] getListTagNoNulls() {
        return new List[] {
            List.of(),
            List.of(Presets.tag(4)),
            List.of(Presets.tag(0), Presets.tag(1), Presets.tag(2), Presets.tag(3), Presets.tag(4)),
            List.of(Presets.tag(3), Presets.tag(4)),
            List.of(Presets.tag(1))
        };
    }

    public static Object[] getListTagSomeInvalid() {
        return new List[] {
            List.of(Presets.invalidTag(0)),
            List.of(Presets.invalidTag(1), Presets.tag(4)),
            List.of(
                    Presets.tag(0),
                    Presets.invalidTag(2),
                    Presets.tag(1),
                    Presets.tag(2),
                    Presets.tag(3),
                    Presets.tag(4)),
            List.of(Presets.invalidTag(3), Presets.invalidTag(4)),
            List.of(Presets.tag(1), Presets.invalidTag(0))
        };
    }

    public static Object[] getListTagWithNulls() {
        return new List[] {
            null,
            TestUtils.listOfAllowNulls((Object) null),
            TestUtils.listOfAllowNulls(
                    Presets.tag(0),
                    Presets.tag(1),
                    null,
                    Presets.tag(2),
                    Presets.tag(3),
                    Presets.tag(4)),
            TestUtils.listOfAllowNulls(null, Presets.tag(4)),
            TestUtils.listOfAllowNulls(Presets.tag(1), null)
        };
    }

    public static Object[] getListIngredientNoNulls() {
        return new List[] {
            List.of(),
            List.of(Presets.ingredient(4)),
            List.of(
                    Presets.ingredient(0),
                    Presets.ingredient(1),
                    Presets.ingredient(2),
                    Presets.ingredient(3),
                    Presets.ingredient(4)),
            List.of(Presets.ingredient(3), Presets.ingredient(4)),
            List.of(Presets.ingredient(1))
        };
    }

    public static Object[] getListIngredientSomeInvalid() {
        return new List[] {
            List.of(Presets.invalidIngredient(0)),
            List.of(Presets.invalidIngredient(1), Presets.ingredient(4)),
            List.of(
                    Presets.ingredient(0),
                    Presets.invalidIngredient(2),
                    Presets.ingredient(1),
                    Presets.ingredient(2),
                    Presets.ingredient(3),
                    Presets.ingredient(4)),
            List.of(Presets.invalidIngredient(3), Presets.invalidIngredient(4)),
            List.of(Presets.ingredient(1), Presets.invalidIngredient(0))
        };
    }

    public static Object[] getListIngredientWithNulls() {
        return new List[] {
            null,
            TestUtils.listOfAllowNulls((Object) null),
            TestUtils.listOfAllowNulls(
                    Presets.ingredient(0),
                    Presets.ingredient(1),
                    Presets.ingredient(2),
                    Presets.ingredient(3),
                    null,
                    Presets.ingredient(4)),
            TestUtils.listOfAllowNulls(null, Presets.ingredient(4)),
            TestUtils.listOfAllowNulls(Presets.ingredient(1), null)
        };
    }

    public static Object[] getListUserNoNulls() {
        return new List[] {
            List.of(),
            List.of(Presets.user(4)),
            List.of(
                    Presets.user(0),
                    Presets.user(1),
                    Presets.user(2),
                    Presets.user(3),
                    Presets.user(4)),
            List.of(Presets.user(3), Presets.user(4)),
            List.of(Presets.user(1))
        };
    }

    public static Object[] getListUserSomeInvalid() {
        return new List[] {
            List.of(Presets.invalidUser(0)),
            List.of(Presets.invalidUser(1), Presets.user(4)),
            List.of(
                    Presets.user(0),
                    Presets.invalidUser(2),
                    Presets.user(1),
                    Presets.user(2),
                    Presets.user(3),
                    Presets.user(4)),
            List.of(Presets.invalidUser(3), Presets.invalidUser(4)),
            List.of(Presets.user(1), Presets.invalidUser(0))
        };
    }

    public static Object[] getListUserWithNulls() {
        return new List[] {
            null,
            TestUtils.listOfAllowNulls((Object) null),
            TestUtils.listOfAllowNulls(
                    Presets.user(0),
                    null,
                    Presets.user(1),
                    Presets.user(2),
                    Presets.user(3),
                    Presets.user(4)),
            TestUtils.listOfAllowNulls(null, Presets.user(4)),
            TestUtils.listOfAllowNulls(Presets.user(1), null)
        };
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods that generate EntityStorages
    //  - Since EntityStorages are compared via reference, none of them are .equals to each other

    public static Object[] getMongoEntityStorages() {
        EntityStorage[] storages = new EntityStorage[NUM_PARAM_COMBOS];
        for (int i = 0; i < storages.length; i++) {
            EntitySaver saver;
            EntityLoader loader;
            try {
                saver = new MongoEntitySaver(TEST_MONGO_FILE);
                loader = new MongoEntityLoader(TEST_MONGO_FILE);
            } catch (IOException e) {
                throw new AssertionError("Please specify the mongo test filename!");
            }
            storages[i] = new EntityStorage(saver, loader);
        }
        return storages;
    }

    public static Object[] getMockEntityStorages() {
        EntityStorage[] storages = new EntityStorage[NUM_PARAM_COMBOS];
        for (int i = 0; i < storages.length; i++) {
            MockEntitySaveAndLoader saverAndLoader = new MockEntitySaveAndLoader();
            storages[i] = new EntityStorage(saverAndLoader, saverAndLoader);
        }
        return storages;
    }
}

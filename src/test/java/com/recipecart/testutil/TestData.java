/* (C)2023 */
package com.recipecart.testutil;

import com.recipecart.entities.Ingredient;
import com.recipecart.entities.Recipe;
import com.recipecart.entities.Tag;
import com.recipecart.entities.User;
import java.util.*;

/**
 * This class provides the raw data/objects that the unit tests will use.
 *
 * <p>Invariant: for each array generated by a method in this class, none of the elements will be
 * equal (.equals) to each other.
 */
public class TestData {
    // Data is in the form of arrays of Objects, so that they can be used in TestUtils to create
    // Arguments objects to be fed into ParameterizedTests.

    // each method in this class generates an Object[] of this length
    static final int NUM_PARAM_COMBOS = 5;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods that generate basic objects and (simulated (i.e. non-null)) primitive types

    public static Object[] getStrings() {
        return new String[] {
            "",
            "abc",
            "Hello World",
            "8*H\n"
                    + "\t(#WRU*H\u8123(*\uD83D\uDE33QH#i238rh9\n"
                    + "https://google.com<script>alert(\"Boo!\");</script>",
            null
        };
    }

    public static Object[] getNotNullStrings() {
        return new String[] {
            "",
            "abc",
            "Hello World",
            "8*H\n"
                    + "\t(#WRU*H\u8123(*\uD83D\uDE33QH#i238rh9\n"
                    + "https://google.com<script>alert(\"Boo!\");</script>",
            "null"
        };
    }

    public static Object[] getIntegers() {
        return new Integer[] {0, 1, -16, null, Integer.MIN_VALUE};
    }

    public static Object[] getInts() {
        return new Object[] {0, 1, -16, Integer.MAX_VALUE, Integer.MIN_VALUE};
    }

    public static Object[] getPrimitiveDoubles() {
        return new Object[] {
            0.0, Double.NaN, Double.POSITIVE_INFINITY, Double.MAX_VALUE, -1022.10221022
        };
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods that generate (non-null) RecipeCart entities
    //  - These entities are the preset entities
    //     - This means that Tag/Ingredient/Recipe names and User usernames will also not be null

    public static Object[] getTags() {
        Object[] tags = new Tag[NUM_PARAM_COMBOS];
        for (int i = 0; i < tags.length; i++) {
            tags[i] = Presets.tag(i);
        }
        return tags;
    }

    public static Object[] getIngredients() {
        Object[] ingredients = new Ingredient[NUM_PARAM_COMBOS];
        for (int i = 0; i < ingredients.length; i++) {
            ingredients[i] = Presets.ingredient(i);
        }
        return ingredients;
    }

    public static Object[] getRecipes() {
        Object[] recipes = new Recipe[NUM_PARAM_COMBOS];
        for (int i = 0; i < recipes.length; i++) {
            recipes[i] = Presets.recipe(i);
        }
        return recipes;
    }

    public static Object[] getUsers() {
        Object[] users = new User[NUM_PARAM_COMBOS];
        for (int i = 0; i < users.length; i++) {
            users[i] = Presets.user(i);
        }
        return users;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Methods that generate Java-library data structures
    //  - "NoNulls" means that none of the elements in the data structures will be null
    //  - Any entities appearing as elements are from the preset entities

    public static Object[] getListStringNoNulls() {
        return new List[] {
            List.of("a", "b"),
            List.of("\n", "\0", "\t", "\r"),
            new LinkedList<String>(),
            List.of("list", "set", "dict", "unordered_dict"),
            List.of("hello", "world")
        };
    }

    public static Object[] getSetTagNoNulls() {
        return new Set[] {
            Set.of(Presets.tag(0)),
            Set.of(Presets.tag(1), Presets.tag(2)),
            Set.of(Presets.tag(4), Presets.tag(2)),
            new HashSet<Tag>(),
            Set.of(Presets.tag(3), Presets.tag(4), Presets.tag(0))
        };
    }

    public static Object[] getMapIngredientDoubleNoNulls() {
        return new Map[] {
            Map.of(Presets.ingredient(0), 2),
            Map.of(),
            Map.of(Presets.ingredient(1), 0.1, Presets.ingredient(2), Double.MAX_VALUE),
            Map.of(
                    Presets.ingredient(0),
                    0.01,
                    Presets.ingredient(1),
                    100,
                    Presets.ingredient(2),
                    2,
                    Presets.ingredient(3),
                    Double.NaN,
                    Presets.ingredient(4),
                    Double.NEGATIVE_INFINITY),
            Map.of(Presets.ingredient(0), -5)
        };
    }

    public static Object[] getListRecipeNoNulls() {
        return new List[] {
            List.of(Presets.recipe(0)),
            List.of(),
            List.of(
                    Presets.recipe(0),
                    Presets.recipe(1),
                    Presets.recipe(2),
                    Presets.recipe(3),
                    Presets.recipe(4)),
            List.of(Presets.recipe(2), Presets.recipe(3)),
            List.of(Presets.recipe(4))
        };
    }

    public static Object[] getMapRecipeDoubleNoNulls() {
        return new Map[] {
            Map.of(Presets.recipe(0), 3),
            Map.of(Presets.recipe(1), 1, Presets.recipe(3), 3e+27, Presets.recipe(4), 4.000001),
            Map.of(Presets.recipe(2), Double.MAX_VALUE),
            Map.of(Presets.recipe(2), -5000, Presets.recipe(4), 4),
            Map.of()
        };
    }

    public static Object[] getSetIngredientNoNulls() {
        return new Set[] {
            Set.of(),
            Set.of(Presets.ingredient(4)),
            Set.of(
                    Presets.ingredient(0),
                    Presets.ingredient(1),
                    Presets.ingredient(2),
                    Presets.ingredient(3),
                    Presets.ingredient(4)),
            Set.of(Presets.ingredient(3), Presets.ingredient(4)),
            Set.of(Presets.ingredient(1))
        };
    }

    public static Object[] getListTagNoNulls() {
        return new List[] {
            List.of(),
            List.of(Presets.tag(4)),
            List.of(Presets.tag(0), Presets.tag(1), Presets.tag(2), Presets.tag(3), Presets.tag(4)),
            List.of(Presets.tag(3), Presets.tag(4)),
            List.of(Presets.tag(1))
        };
    }

    public static Object[] getListIngredientNoNulls() {
        return new List[] {
            List.of(),
            List.of(Presets.ingredient(4)),
            List.of(
                    Presets.ingredient(0),
                    Presets.ingredient(1),
                    Presets.ingredient(2),
                    Presets.ingredient(3),
                    Presets.ingredient(4)),
            List.of(Presets.ingredient(3), Presets.ingredient(4)),
            List.of(Presets.ingredient(1))
        };
    }

    public static Object[] getListUserNoNulls() {
        return new List[] {
            List.of(),
            List.of(Presets.user(4)),
            List.of(
                    Presets.user(0),
                    Presets.user(1),
                    Presets.user(2),
                    Presets.user(3),
                    Presets.user(4)),
            List.of(Presets.user(3), Presets.user(4)),
            List.of(Presets.user(1))
        };
    }
}
